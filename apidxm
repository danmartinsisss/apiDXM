#include 'totvs.ch'
#include 'tlpp-core.th'

/*/{Protheus.doc} Cadastro de Fardão
    Classe para cadastro de fardão tabela DXL
    @author Daniel Martins
    /*/
class zGMSAPI003 from fwAdapterBaseV2

    public method new() constructor

    @get('/algodoeira/lista/rolinhos')
    public method lista_rolinhos() as logical

    @post('/algodoeira/rolinho/new')
    public method incluir_rolinho() as logical

end class

method new() class zGMSAPI003; return self

method incluir_rolinho() class zGMSAPI003
    
    Local jBodyReq  as json
    Local aDados    as array
    Local nOpc      as numeric
    Local cCodigo   as character

    Private lMsErroAuto as logical

    try
        
        jBodyReq := jsonObject():new()
        jBodyReq:fromJson(oRest:getBodyRequest())

        cCodigo   := jBodyReq['dxl_codigo']
        cDtdigi   := jBodyReq['dxl_dtdigi']
        cSafra    := jBodyReq['dxl_safra' ]
        cCodpro   := jBodyReq['dxl_codpro']
        cPrdtor   := jBodyReq['dxl_prdtor']
        cLjpro    := jBodyReq['dxl_ljpro' ]
        cFaz      := jBodyReq['dxl_faz'   ]    
        cTalhao   := jBodyReq['dxl_talhao']
        cCodvar   := jBodyReq['dxl_codvar']
        cLocal    := jBodyReq['dxl_local' ]
        nPsesti   := jBodyReq['dxl_psesti']
        cBorda    := jBodyReq['dxl_borda' ]
        cStatus   := jBodyReq['dxl_status']
        cOrdclt   := jBodyReq['dxl_ordclt']
        cCordx    := jBodyReq['dxl_cordx' ]
        cCordy    := jBodyReq['dxl_cordy' ]
        cObs      := jBodyReq['dxl_obs'   ]
        cOrigem   := jBodyReq['dxl_origem']
        cXrfid    := jBodyReq['dxl_obs'   ]
        cXsnetq   := jBodyReq['dxl_xsnetq']
        nXumicl   := jBodyReq['dxl_xumicl']

        aDados  := {{"DXL_CODIGO"   ,cCodigo ,Nil},;
                    {"DXL_DTDIGI"   ,cDtdigi ,Nil},;
                    {"DXL_SAFRA"    ,cSafra  ,Nil},;
                    {"DXL_CODPRO"   ,cCodpro ,Nil},;
                    {"DXL_PRDTOR"   ,cPrdtor ,Nil},;
                    {"DXL_LJPRO"    ,cLjpro  ,Nil},;
                    {"DXL_FAZ"      ,cFaz    ,Nil},;
                    {"DXL_TALHAO"   ,cTalhao ,Nil},;
                    {"DXL_CODVAR"   ,cCodvar ,Nil},;
                    {"DXL_LOCAL"    ,cLocal  ,Nil},;
                    {"DXL_PSESTI"   ,nPsesti ,Nil},;
                    {"DXL_BORDA"    ,cBorda  ,Nil},;
                    {"DXL_STATUS"   ,cStatus ,Nil},;
                    {"DXL_ORDCLT"   ,cOrdclt ,Nil},;
                    {"DXL_CORDX"    ,cCordx  ,Nil},;
                    {"DXL_CORDY"    ,cCordy  ,Nil},;
                    {"DXL_OBS"      ,cObs    ,Nil},;
                    {"DXL_ORIGEM"   ,cOrigem ,Nil},;
                    {"DXL_XRFID"    ,cXrfid  ,Nil},;
                    {"DXL_XSNETQ"   ,cXsnetq ,Nil},;
                    {"DXL_XUMICL"   ,nXumicl ,Nil}}

        lMsErroAuto := .F.
        msExecAuto({|x,y| agra601(x,y)}, aDados, nOpc)
        
        if lMsErroAuto
            mostraErro('\data\','erro_dxl.txt')
            cError := memoread('\data\erro_dxl.txt')

            err := errorClass():new()
            err:description := cError

            throw err

        EndIF

        jResp           := jsonObject():new()
        jResp['dxl_codigo'  ]  := DXL->DXL_CODIGO
        jResp['dxl_obs'     ]  := DXL->DXL_OBS
        jResp['status'      ]  := 'Rolinho cadastrado com sucesso'

        oRest:setResponse(jResp:toJson())

    catch err

        cError          := err:description
        jResp           := jsonObject():new()
        jResp['error']  := cError

        oRest:setFault(jResp:toJson())

    endtry


Return .T.

method lista_rolinhos() class zGMSAPI003

    local nError            as numeric
    local cError            as character

    local jQueryStr         as json
    local jResp             as json
    
    local cSQL              as character
    local cWhere            as character

    local cCodpro           as character
    local cPrdtor           as character
    local cLjpro            as character
    local cFaz              as character
    local cTalhao           as character
    local cCodvar           as character
    local cLocal            as character
    local cPsesti           as character
    local cBorda            as character
    local cOrdclt           as character
    local cCordx            as character
    local cCordy            as character
    local cObs              as character
    local cXrfid            as character
    local cXsnetq           as character
    local cXumicl           as character

    local nSize             as numeric
    local nPage             as numeric
    local cOrder            as character
    local cSearch           as character

    try
        jQueryStr           := oRest:getQueryRequest()

        cCodigo             := jQueryStr['DXL_CODIGO']
        cDtdigi             := jQueryStr['DXL_DTDIGI']
        cSafra              := jQueryStr['DXL_SAFRA' ]
        cCodpro             := jQueryStr['DXL_CODPRO']
        cPrdtor             := jQueryStr['DXL_PRDTOR']
        cLjpro              := jQueryStr['DXL_LJPRO' ]
        cFaz                := jQueryStr['DXL_FAZ'   ]
        cTalhao             := jQueryStr['DXL_TALHAO']
        cCodvar             := jQueryStr['DXL_CODVAR']
        cLocal              := jQueryStr['DXL_LOCAL' ]
        cPsesti             := jQueryStr['DXL_PSESTI']
        cBorda              := jQueryStr['DXL_BORDA' ]
        cOrdclt             := jQueryStr['DXL_ORDCLT']
        cCordx              := jQueryStr['DXL_CORDX' ]
        cCordy              := jQueryStr['DXL_CORDY' ]
        cObs                := jQueryStr['DXL_OBS'   ]
        cXrfid              := jQueryStr['DXL_OBS'   ]
        cXsnetq             := jQueryStr['DXL_XSNETQ']
        cXumicl             := jQueryStr['DXL_XUMICL']
        nSize               := jQueryStr['pageSize'  ]
        nPage               := jQueryStr['Page'      ]
        cOrder              := jQueryStr['order'     ]
        cSearch             := jQueryStr['search'    ]


        nSize               := if(empty(nSize), 20, nSize)
        nPage               := if(empty(nPage), 1, nPage)

        cSQL                := "SELECT #QueryFields# FROM " + retSqlName("DXL") + " DXL"
        cSQL                += CRLF + "WHERE #QueryWhere# "

        cWhere              := "D_E_L_E_T_ <> '*'"

        if .not. empty(cCodigo)
            cWhere           += CRLF + "AND DXL_CODIGO = '" + cCodigo + "'"
        EndIF

        if .not. empty(cSearch)
            cWhere           += CRLF + "AND DXL_CODIGO LIKE '%" + cSearch + "%'"
        EndIF
        
        _Super:new('GET',.T.)
        ::addMapFields('DXL_CODIGO'     , 'DXL_CODIGO'      , .T.)
        ::addMapFields('DXL_DTDIGI'     , 'DXL_DTDIGI'      , .T.)
        ::addMapFields('DXL_SAFRA'      , 'DXL_SAFRA'       , .T.)
        ::addMapFields('DXL_CODPRO'     , 'DXL_CODPRO'      , .T.)
        ::addMapFields('DXL_PRDTOR'     , 'DXL_PRDTOR'      , .T.)
        ::addMapFields('DXL_LJPRO'      , 'DXL_LJPRO'       , .T.)
        ::addMapFields('DXL_FAZ'        , 'DXL_FAZ'         , .T.)
        ::addMapFields('DXL_TALHAO'     , 'DXL_TALHAO'      , .T.)
        ::addMapFields('DXL_CODVAR'     , 'DXL_CODVAR'      , .T.)
        ::addMapFields('DXL_LOCAL'      , 'DXL_LOCAL'       , .T.)
        ::addMapFields('DXL_PSESTI'     , 'DXL_PSESTI'      , .T.)
        ::addMapFields('DXL_BORDA'      , 'DXL_BORDA'       , .T.)
        ::addMapFields('DXL_ORDCLT'     , 'DXL_ORDCLT'      , .T.)
        ::addMapFields('DXL_CORDX'      , 'DXL_CORDX'       , .T.)
        ::addMapFields('DXL_CORDY'      , 'DXL_CORDY'       , .T.)
        ::addMapFields('DXL_OBS'        , 'DXL_OBS'         , .T.)
        ::addMapFields('DXL_OBS'        , 'DXL_XRFID'       , .T.)
        ::addMapFields('DXL_XSNETQ'     , 'DXL_XSNETQ'      , .T.)
        ::addMapFields('DXL_XUMICL'     , 'DXL_XUMICL'      , .T.)
    
        ::setQuery(cSQL)
        ::setWhere(cWhere)
        ::setPageSize(nSize)
        ::setPage(nPage)
        ::setOrder(cOrder)

        if ::execute()
            ::fillGetResponse()
            oRest:setResponse(::getJsonResponse())

        else
            nError          := ::getCode()
            cError          := ::getMessage()

            jResp           := jsonObject():new()
            jResp['error']  := cError

            oRest:setFault(jResp:toJson())
        EndIF

    catch err

        cError := err:errorstack

        jResp           := jsonObject():new()
        jResp['error']  := cError

        oRest:setFault(jResp:toJson())

    endtry

Return .T.


//Esse aqui é o JSON de exemplo que estou enviando no POST
{
  "dxl_codigo": "999996",
  "dxl_dtdigi": "2024-06-20T12:20:34",
  "dxl_safra": "2324",
  "dxl_codpro": "0103000001",
  "dxl_prdtor": "1",
  "dxl_ljpro": "0001",
  "dxl_faz": "11",
  "dxl_talhao": "11-SM04-10",
  "dxl_codvar": "603018",
  "dxl_local": "04",
  "dxl_psesti": 2800,
  "dxl_borda": "2",
  "dxl_status": "1",
  "dxl_ordclt": "999",
  "dxl_cordx": "-12.905197126953128",
  "dxl_cordy": "-55.93049951015627",
  "dxl_obs": "Cadastrado por daniel via API",
  "dxl_origem": "A",
  "dxl_xrfid": "123456asd213456asd",
  "dxl_xsnetq": "21605259206",
  "dxl_xumicl": 8
}


